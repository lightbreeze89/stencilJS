alert("Я JavaScript!");
//    "use strict"- команда пишется первой строкой перед функцией для работы кода d в современном режиме если ее не указать код будет работать в устаревшем режиме .


let admin = "name";//скопировал значение переменной name в Переменную admin

let name = "Jon";

admin = name;

alert(admin);


//number //включает числа от -9007199254740991 до 9007199254740991 

//BigInt //включает числа от -1234567890123456789012345678901234567890n  до 1234567890123456789012345678901234567890n  обязательное добавлем (n)в коцне числа. 


let nameIvan = "Иван";  //получим строку "привет Иван" т.к обратные ковычки вычисляют знанчение переменной и преобразуют в строку.
alert(`Привет, ${nameIvan}!`);


//null -Говорит о том что значение не известно.

//undefined - Говорит о том что значние не было присвоенно.

//typeof - Возвращает то к какому типу данных относится наш обьект(переменная).


result = prompt("title", "default");//эта функция вывзовет модальное окно где title Это текст, deafault это поле для ввода текста,так же будет две кнопки OK and Cancel
//после ввода если нажать ОК то что ввели станет значением перемеенной result.

let isBoss = confirm("Ты здесь главный?"); //Выводит модальное окно с вопросом и кнопкой ОК и Cancel результат – true, если нажата кнопка OK. В других случаях – false.


let counter = 1;
alert(2 * ++counter); // 4, префиксное увиличение возвращает новое значение с учетом сложения.
//Если хочется тут же использовать результат, то нужна префиксная форма:


let counterTwo = 1;
alert(2 * counterTwo++); // 2, потому что counter++ возвращает "старое" значение  это постфиксное увиличение.
//Если нужно увеличить и при этом получить значение переменной до увеличения – нужна постфиксная форма:



/*Поддерживаются следующие побитовые операторы:

AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
Они используются редко, когда возникает необходимость оперировать с числами на очень низком (побитовом) уровне.*/




/*Запятая имеет очень низкий приоритет и берет лишь РЕЗУЛЬТАТ последнего выражение после запятой.
Пожалуйста, обратите внимание, что оператор , имеет очень низкий приоритет, ниже =, поэтому скобки важны в приведённом выше примере.

Без них в a = 1 + 2, 3 + 4 сначала выполнится +, суммируя числа в a = 3, 7, затем оператор присваивания = присвоит a = 3, а то, что идёт дальше,
 будет игнорировано. Всё так же, как в (a = 1 + 2), 3 + 4.*/


loginPass = prompt("Login", "") {
   if (loginPass === "Админ") {
   passWord = prompt("Password", "")

   }
}

